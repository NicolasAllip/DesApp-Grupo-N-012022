plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'war'
	id 'idea'
	id "jacoco"
	id 'eclipse'
	id "org.sonarqube" version "3.3"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

jacoco {
    toolVersion = "0.8.5"
}

sonarqube {
	properties {
		property 'sonar.projectKey', "NicolasAllip_DesApp-Grupo-N-012022"
		property 'sonar.host.url', "https://sonarcloud.io"
		property 'sonar.organization', "devapps-grupo"
		property' sonar.projectKey',"NicolasAllip_DesApp-Grupo-N-012022"
		property 'sonar.java.binaries', "build/classes"
		property 'sonar.java.coveragePlugin', "jacoco"
		property 'sonar.coverage.jacoco.xmlReportPaths', "build/reports/jacoco/test/jacocoTestReport.xml"
		property 'sonar.sources', "src/main"
		property 'sonar.tests', "src/test"
		}
}

eclipseJdt{
	doLast {
		ant.propertyfile(file: ".settings/org.eclipse.core.resource.prefs") {
			ant.entry(key: "eclipse.preferences.version", value: "1")
			ant.entry(key: "encoding/<project>", value: "utf-8")
		}
	}
}

compileJava.options.encoding = 'utf-8'
compileTestJava.options.encoding = 'utf-8'

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

group = 'ar.edu.unq.desapp.grupo-n'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenCentral()
	jcenter()
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'io.springfox:springfox-swagger2:2.7.0'
	implementation 'io.springfox:springfox-swagger-ui:2.7.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2:1.4.197'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'com.nimbusds:nimbus-jose-jwt:9.0'
    //implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    //runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
    //'org.bouncycastle:bcprov-jdk15on:1.70',
    //'io.jsonwebtoken:jjwt-jackson:0.11.5' or 'io.jsonwebtoken:jjwt-gson:0.11.5' for gson
	implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-jwt'
	implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-server'
	implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.4.5'
	testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.2')
	testImplementation('org.mockito:mockito-core:3.+')
}



test {
    finalizedBy jacocoTestReport
}

test {
    useJUnitPlatform()
}